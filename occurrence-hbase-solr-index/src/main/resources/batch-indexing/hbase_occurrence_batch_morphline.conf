morphlines : [
  {
    id : occurrenceHBaseMorphlineImporter

    # Import all morphline commands in these java packages and their subpackages.
    importCommands : ["com.cloudera.**", "org.apache.solr.**","org.kitesdk.morphline.**", "com.ngdata.**"]

    commands : [
      {
      extractHBaseCells {
          mappings : [
            {
              inputColumn : "o:datasetKey"
              outputField : "dataset_key"
              type : string
              source : value
            }
            {
              inputColumn : "o:v_institutionCode"
              outputField : "institution_code"
              type : string
              source : value
            }
            {
              inputColumn : "o:v_collectionCode"
              outputField : "collection_code"
              type : string
              source : value
            }
            {
              inputColumn : "o:v_catalogNumber"
              outputField : "catalog_number"
              type : string
              source : value
            }
            {
              inputColumn : "o:v_recordedBy"
              outputField : "recorded_by"
              type : string
              source : value
            }
            {
              inputColumn : "o:v_recordNumber"
              outputField : "record_number"
              type : string
              source : value
            }
            {
              inputColumn : "o:eventDate"
              outputField : "event_date"
              type : long
              source : value
            }
            {
              inputColumn : "o:lastInterpreted"
              outputField : "last_interpreted"
              type : long
              source : value
            }
            {
              inputColumn : "o:kingdomKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:phylumKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:classKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:orderKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:familyKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:genusKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:subgenusKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:speciesKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:taxonKey"
              outputField : "taxon_key"
              type : int
              source : value
            }
            {
              inputColumn : "o:countryCode"
              outputField : "country"
              type : string
              source : value
            }
            {
              inputColumn : "o:continent"
              outputField : "continent"
              type : string
              source : value
            }
            {
              inputColumn : "o:publishingCountry"
              outputField : "publishing_country"
              type : string
              source : value
            }
            {
              inputColumn : "o:decimalLatitude"
              outputField : "latitude"
              type : double
              source : value
            }
            {
              inputColumn : "o:decimalLongitude"
              outputField : "longitude"
              type : double
              source : value
            }
            {
              inputColumn : "o:year"
              outputField : "year"
              type : int
              source : value
            }
            {
              inputColumn : "o:month"
              outputField : "month"
              type : int
              source : value
            }
            {
              inputColumn : "o:basisOfRecord"
              outputField : "basis_of_record"
              type : string
              source : value
            }
            {
              inputColumn : "o:elevation"
              outputField : "elevation"
              type : double
              source : value
            }
            {
              inputColumn : "o:depth"
              outputField : "depth"
              type : double
              source : value
            }
            {
              inputColumn : "o:typeStatus"
              outputField : "type_status"
              type : string
              source : value
            }
            {
              inputColumn : "o:http_//rs.gbif.org/terms/1.0/Multimedia"
              outputField : "media_type"
              type : org.gbif.occurrence.hbaseindexer.MediaTypeByteArrayMapper
              source : value
            }
            {
              inputColumn : "o:_iss_*"
              outputField : "issue"
              type : string
              source : qualifier
            }
            {
              inputColumn : "o:establishmentMeans"
              outputField : "establishment_means"
              type : string
              source : value
            }
            {
              inputColumn : "o:occurrenceId"
              outputField : "occurrence_id"
              type : string
              source : value
            }
          ]
        }
      }
      {
        java {
          imports : "import java.util.*;import java.text.*;import org.gbif.api.vocabulary.OccurrenceIssue;import org.gbif.api.vocabulary.Rank;"
          code: """
            //Dates are stored as Longs and converted into Dates
            Object lastInterpretedAsLong = record.getFirstValue("last_interpreted");
            if (lastInterpretedAsLong != null) {
              record.replaceValues("last_interpreted",new Date((Long)lastInterpretedAsLong));
            }
            Object eventDateAsLong = record.getFirstValue("event_date");
            if (eventDateAsLong != null) {
              record.replaceValues("event_date", new Date((Long)eventDateAsLong));
            }

            //coordinate and has_coordinate indexing
            Object oLatitude = record.getFirstValue("latitude");
            Object oLongitude = record.getFirstValue("longitude");
            if (oLatitude != null && oLongitude != null) {
              Double latitude = (Double)oLatitude;
              Double longitude = (Double)oLongitude;
              record.put("has_coordinate",true);
              if((latitude >= -90.0 && latitude <= 90.0) && (longitude >= -180.0 && longitude <= 180.0)) {
                record.put("coordinate",latitude.toString() + "," + longitude.toString());
              }
            }  else {
              record.put("has_coordinate",false);
            }

            //Issues column names contain the prefix _iss_ that must be removed
            List issues = (List)record.get("issue");
            Set<String> newIssues = new HashSet<String>();
            for (Object issue : issues) {
              String existingIssue = (String)issue;
              newIssues.add(existingIssue.replaceFirst("_iss_",""));
            }
            record.removeAll("issue");
            record.getFields().putAll("issue",newIssues);

            //spatial_issues indexing
            boolean hasSpatialIssues = false;
            if (!newIssues.isEmpty()) {
              for (OccurrenceIssue rule : OccurrenceIssue.GEOSPATIAL_RULES) {
                if (newIssues.contains(rule.name())) {
                  hasSpatialIssues = true;
                  break;
                }
              }
            }
            record.put("spatial_issues",hasSpatialIssues);

            return child.process(record);
                """
        }
      }
    ]
  }
]
