SOLR_LOCATOR : {
  # Name of solr collection
  collection : uat_occurrence

  # ZooKeeper ensemble
  zkHost : "c1n1.gbif.org:2181,c1n2.gbif.org:2181,c1n3.gbif.org:2181/solruat"

  # The maximum number of documents to send to Solr per network batch (throughput knob)
  # batchSize : 100
}

#Morphline that reads records from avro files and transform those records into SolrInputDocuments
morphlines : [
  {
    id : occurrenceMorphlineImporter

    # Import all morphline commands in these java packages and their subpackages.
    importCommands : ["org.kitesdk.**", "org.apache.solr.**"]

    commands : [
      {
        # Parse Avro container file and emit a record for each avro object
        readAvroContainer {
        }
      }

      {
        # Extract the values from Avro paths into fields.
        extractAvroPaths {
          flatten : true
          paths : {
            key:/key
            dataset_key:/dataset_key
            institution_code:/institution_code
            collection_code:/collection_code
            catalog_number:/catalog_number
            recorded_by:/recorded_by
            record_number:/record_number
            event_date:/event_date
            last_interpreted:/last_interpreted
            taxon_key:/taxon_key
            country:/country
            continent:/continent
            publishing_country:/publishing_country
            latitude:/latitude
            longitude:/longitude
            coordinate: /coordinate
            coordinate_map: /coordinate
            year:/year
            month:/month
            basis_of_record:/basis_of_record
            spatial_issues:/spatial_issues
            has_coordinate:/has_coordinate
            elevation:/elevation
            depth:/depth
            type_status:/type_status
            establishment_means:/establishment_means
            occurrence_id:/occurrence_id
            media_type:/media_type
            issue:/issue
            scientific_name:/scientific_name
          }
        }
      }
      {
        java {
          imports : "import java.util.*;"
          code: """
           List<String> dataset_key = record.get("dataset_key");
           if(dataset_key.contains("")) {
             record.removeAll("dataset_key");
           }
           List<String> institution_code = record.get("institution_code");
           if(institution_code.contains("")) {
             record.removeAll("institution_code");
           }
           List<String> collection_code = record.get("collection_code");
           if(collection_code.contains("")) {
             record.removeAll("collection_code");
           }
           List<String> catalog_number = record.get("catalog_number");
           if(catalog_number.contains("")) {
             record.removeAll("catalog_number");
           }
           List<String> recorded_by = record.get("recorded_by");
           if(recorded_by.contains("")) {
             record.removeAll("recorded_by");
           }
           List<String> record_number = record.get("record_number");
           if(record_number.contains("")) {
             record.removeAll("record_number");
           }
           List<Long> event_date = record.get("event_date");
           if(event_date.contains(-1)) {
             record.removeAll("event_date");
           }
           List<Long> lastInterpreted = record.get("last_interpreted");
           if(lastInterpreted.contains(-1)) {
             record.removeAll("last_interpreted");
           }
           List<String> country = record.get("country");
           if(country.contains("")) {
             record.removeAll("country");
           }
           List<String> continent = record.get("continent");
           if(continent.contains("")) {
             record.removeAll("continent");
           }
           List<String> publishing_country = record.get("publishing_country");
           if(publishing_country.contains("")) {
             record.removeAll("publishing_country");
           }
           List<Double> latitude = record.get("latitude");
           if(latitude.contains(-1000.0)) {
             record.removeAll("latitude");
           }
           List<Double> longitude = record.get("longitude");
           if(longitude.contains(-1000.0)) {
             record.removeAll("longitude");
           }
           List<String> coordinate = record.get("coordinate");
           if(coordinate.contains("")) {
             record.removeAll("coordinate");
             record.removeAll("coordinate_map");
           }
           List<Integer> year = record.get("year");
           if(year.contains(-1)) {
             record.removeAll("year");
           }
           List<String> month = record.get("month");
           if(month.contains(-1)) {
             record.removeAll("month");
           }
           List<String> type_status = record.get("type_status");
           if(type_status.contains("-1")) {
             record.removeAll("type_status");
           }

           List<Double> elevation = record.get("elevation");
           if(elevation.contains(-1000000)) {
             record.removeAll("elevation");
           }
           List<Double> depth = record.get("depth");
           if(depth.contains(-1000000)) {
             record.removeAll("depth");
           }
	         List<String> mediaType = record.get("media_type");
           if(mediaType.isEmpty()) {
              record.removeAll("media_type");
           }
	         List<String> issue = record.get("issue");
           if(issue.isEmpty()) {
              record.removeAll("issue");
           }
           List<String> establishmentMeans = record.get("establishment_means");
           if(establishmentMeans.contains("")) {
             record.removeAll("establishment_means");
           }
           List<String> occurrenceId = record.get("occurrence_id");
           if(occurrenceId.contains("")) {
             record.removeAll("occurrence_id");
           }

           List<Long> eventDateAsLong = record.get("event_date");
           if(!eventDateAsLong.isEmpty()) {
             Date dateValue = new Date((Long)eventDateAsLong.get(0));
             record.removeAll("event_date");
             record.put("event_date",dateValue);
           }
           List<Long> lastInterpretedAsLong = record.get("last_interpreted");
           if(!lastInterpretedAsLong.isEmpty()) {
             Date lastInterpretedValue = new Date((Long)lastInterpretedAsLong.get(0));
             record.removeAll("last_interpreted");
             record.put("last_interpreted",lastInterpretedValue);
           }
            List<String> scientific_name = record.get("scientific_name");
            if(scientific_name.contains("")) {
              record.removeAll("scientific_name");
            }
           Set<Integer> taxonKey = new HashSet<Integer>(record.get("taxon_key"));
           taxonKey.remove(-1);
           record.removeAll("taxon_key");
           record.getFields().putAll("taxon_key",taxonKey);
           return child.process(record);
               """
        }
      }
      {
        sanitizeUnknownSolrFields {
          # Location from which to fetch Solr schema
          solrLocator : ${SOLR_LOCATOR}

          # renameToPrefix : "ignored_"
        }
      }
      {
        loadSolr {
          solrLocator : ${SOLR_LOCATOR}
        }
      }
    ]
  }
]
